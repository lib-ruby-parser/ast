// This file is autogenerated by {{ template }}

use crate::nodes::InnerNode;
use crate::nodes::InspectVec;
use crate::Loc;
{% for field in node.fields -%}
    {%- case field.field_type -%}
    {%- when "Node" or "Nodes" or "MaybeNode" -%}
        use crate::Node;
        {%- break -%}
    {%- endcase -%}
{%- endfor -%}
{%- for field in node.fields -%}
    {%- case field.field_type -%}
    {%- when "StringValue" -%}
        use crate::Bytes;
        {%- break -%}
    {%- endcase -%}
{%- endfor %}

{{ node.comment | render_comment: "///", 0 }}
#[derive(Debug, Clone, PartialEq)]
#[repr(C)]
pub struct {{ node.camelcase_name }} {
{%- for field in node.fields %}
    {{ field.comment | render_comment: "///", 4 }}
    pub {{ field.snakecase_name | escape_rust_keyword }}:
    {{- " " -}}
    {%- case field.field_type -%}
    {%- when "Node" -%}
        Box<Node>
    {%- when "Nodes" -%}
        Vec<Node>
    {%- when "MaybeNode" or "RegexpOptions" -%}
        Option<Box<Node>>
    {%- when "Loc" -%}
        Loc
    {%- when "MaybeLoc" -%}
        Option<Loc>
    {%- when "Str" or "RawStr" -%}
        String
    {%- when "MaybeStr" or "Chars" -%}
        Option<String>
    {%- when "StringValue" -%}
        Bytes
    {%- when "U8" -%}
        u8
    {%- else -%}
        compile_error!("Unsupported field type {{ field.field_type }}")
    {%- endcase -%},
{% endfor %}
}

impl InnerNode for {{ node.camelcase_name }} {
    fn expression(&self) -> &Loc {
        &self.expression_l
    }

    fn inspected_children(&self, indent: usize) -> Vec<String> {
        let mut result = InspectVec::new(indent);
        {% for field in node.fields %}
            {%- comment -%} Some attributes are Rust keywords {%- endcomment -%}
            {%- assign attr_name = field.snakecase_name | escape_rust_keyword -%}

            {%- case field.field_type -%}
            {%- when "Loc" or "MaybeLoc" -%}
                {%- continue -%}
            {%- when "Node" -%}
                {%- assign method_name = "push_node" -%}
            {%- when "Nodes" -%}
                {%- assign method_name = "push_nodes" -%}
            {%- when "MaybeNode" -%}
                {%- if field.always_print -%}
                    {%- assign method_name = "push_maybe_node_or_nil" -%}
                {%- else -%}
                    {%- assign method_name = "push_maybe_node" -%}
                {%- endif -%}
            {%- when "RegexpOptions" -%}
                {%- assign method_name = "push_regex_options" -%}
            {%- when "Str" -%}
                {%- assign method_name = "push_str" -%}
            {%- when "RawStr" -%}
                {%- assign method_name = "push_raw_str" -%}
            {%- when "Chars" -%}
                {%- assign method_name = "push_chars" -%}
            {%- when "MaybeStr" -%}
                {%- if field.always_print -%}
                    {%- assign method_name = "push_maybe_str_or_nil" -%}
                {%- else -%}
                    {%- assign method_name = "push_maybe_str" -%}
                {%- endif -%}
            {%- when "StringValue" -%}
                {%- assign method_name = "push_string_value" -%}
            {%- when "U8" -%}
                {%- assign method_name = "push_u8" -%}
            {%- else -%}
                {%- assign method_name = "unsupported" -%}
                compile_error!("Unsupported field type {{ field.field_type }}")
            {%- endcase -%}
            result.{{ method_name }}(&self.{{ attr_name }});
        {% endfor %}
        result.strings()
    }

    fn str_type(&self) -> &'static str {
        "{{ node.wqp_name }}"
    }

    fn print_with_locs(&self) {
        println!("{}", self.inspect(0));
        {% for field in node.fields %}
            {%- comment -%} Some attributes are Rust keywords {%- endcomment -%}
            {%- assign attr_name = field.snakecase_name | escape_rust_keyword -%}

            {% case field.field_type %}
            {%- when "Node" -%}
                self.{{ attr_name }}.inner_ref().print_with_locs();
            {%- when "Nodes" -%}
                for node in self.{{ attr_name }}.iter() { node.inner_ref().print_with_locs(); }
            {%- when "MaybeNode" or "RegexpOptions" -%}
                if let Some(node) = self.{{ attr_name }}.as_ref() { node.inner_ref().print_with_locs() }
            {%- when "Loc" -%}
                self.{{ attr_name }}.print("{{ attr_name | remove: "_l" }}");
            {%- when "MaybeLoc" -%}
                if let Some(loc) = self.{{ attr_name }}.as_ref() { loc.print("{{ attr_name | remove: "_l" }}") }
            {%- when "Str" or "RawStr" or "MaybeStr" or "Chars" or "StringValue" or "U8" -%}
                {%- continue -%}
            {%- else -%}
                compile_error!("Unsupported field type {{ field.field_type }}")
            {% endcase %}
        {% endfor %}
    }
}
