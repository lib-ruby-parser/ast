// This file is autogenerated by {{ template }}

use crate::traverse::finder::{Finder, PatternItem};
use crate::traverse::visitor::Visitor;
use crate::nodes::*;
use crate::Node;

impl Visitor for Finder {
    {% for node in nodes %}
    fn on_{{ node.camelcase_name | camelcase_to_snakecase }}(&mut self, node: &{{ node.camelcase_name }}) {
        match self.pattern.unshift() {
            {% for field in node.fields %}
                {%- assign field_name = field.snakecase_name | escape_rust_keyword -%}

                {%- if field_name == "statements" -%}
                    {%- assign variant = "Stmts" -%}
                {%- elsif field_name == "call" -%}
                    {%- assign variant = "MethodCall" -%}
                {%- elsif field_name == "default" -%}
                    {%- assign variant = "DefaultValue" -%}
                {%- elsif field_name == "items" -%}
                    {%- assign variant = "MlhsItems" -%}
                {%- elsif node.wqp_name == "when" and field_name == "patterns" -%}
                    {%- assign variant = "Args" -%}
                {%- elsif node.wqp_name == "undef" and field_name == "names" -%}
                    {%- assign variant = "Args" -%}
                {%- elsif node.wqp_name == "args" and field_name == "args" -%}
                    {%- assign variant = "Arglist" -%}
                {%- elsif node.wqp_name == "procarg0" and field_name == "args" -%}
                    {%- assign variant = "Arglist" -%}
                {%- elsif node.wqp_name == "rescue" and field_name == "else_" -%}
                    {%- assign variant = "ElseBody" -%}
                {%- else -%}
                    {%- assign variant = field_name | snakecase_to_camelcase  -%}
                {%- endif -%}

                {%- case field.field_type -%}
                {%- when "Loc" or "MaybeLoc" or "Str" or "RawStr" or "MaybeStr" or "Chars" or "StringValue" or "U8" -%}
                    // skip {{ field_name }}
                {%- when "Node" -%}
                    Some(PatternItem::{{ variant }}) => { self.visit(&node.{{ field_name }}); }
                {%- when "MaybeNode" or "RegexpOptions" -%}
                    Some(PatternItem::{{ variant }}) => { if let Some(inner) = node.{{ field_name }}.as_ref() { self.visit(inner); } }
                {%- when "Nodes" -%}
                    Some(PatternItem::{{ variant }}) => { visit_node_list(self, &node.{{ field_name }}) }
                {%- else -%}
                    _ => compile_error!("Unknown node field type {{ field.field_type }}");
                {% endcase %}

            {% endfor %}

            None => {
                // end of the search chain, match
                self.result = Some(Node::{{ node.camelcase_name }}(node.clone()));
            }
            Some(_) => {
                // end of the search chain, no match
            }
        }
    }
{% endfor %}

    fn visit(&mut self, node: &Node) {
        match node {
            {% for node in nodes %}
            Node::{{ node.camelcase_name }}(inner) => {
                self.on_{{ node.camelcase_name | camelcase_to_snakecase }}(inner);
            }
            {% endfor %}
        }
    }
}

fn visit_node_list(finder: &mut Finder, nodes: &[Node]) {
    if let Some(PatternItem::Idx(idx)) = finder.pattern.unshift() {
        if let Some(item) = nodes.get(idx) {
            finder.visit(item)
        }
    } else {
        // end of the search chain, no match
    }
}
